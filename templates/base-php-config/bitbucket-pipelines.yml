image: coddin/laravel:php8.2

definitions:
  steps:
    - step: &project-build
        name: Build project
        caches:
          - composer
        script:
          # Dirty hack, figure out how to build a container and set the default user to non-root.
          - export COMPOSER_ALLOW_SUPERUSER=1
          - php --version
          - composer --version
          - node --version
          - npm --version
          - composer install
          - composer audit
          - npm install --ignore-scripts
          - php artisan ziggy:generate
          - php artisan typescript:transform --force
          - npm run build
        artifacts:
          - vendor/**
          - public/build/**
    - step: &codestyle
        name: PHP Codestyle
        script:
          - ./vendor/bin/phpcs --standard=./phpcs_codestyle.xml --report=checkstyle -q -n app >> phpcs_checkstyle.xml
          # Fix needed for atlassian/checkstyle-report
          - mkdir -p storage/framework/testing/disks && chmod -R 777 storage/framework/testing
        after-script:
          - pipe: atlassian/checkstyle-report:0.4.0
            variables:
              CHECKSTYLE_RESULT_PATTERN: .*/phpcs_checkstyle.xml
              CHECKSTYLE_REPORT_TITLE: PHPCodeSniffer Checkstyle report
              CHECKSTYLE_REPORT_ID: phpcs-checkstyle
              REPORT_FAIL_SEVERITY: error
    - step: &npm-lint
        name: Linter
        script:
          - npm install --ignore-scripts
          - npm run lint
    - step: &static
        name: Static analysis
        caches:
          - docker
        script:
          # This project uses encryption, hence this fix is needed
          - touch .env
          - echo "APP_KEY=" >> .env
          - php ./artisan key:generate
          - ./vendor/bin/phpstan analyse --memory-limit=6G --error-format=checkstyle >> phpstan_checkstyle.xml
          # Fix needed for atlassian/checkstyle-report
          - mkdir -p storage/framework/testing/disks && chmod -R 777 storage/framework/testing
        after-script:
          - pipe: atlassian/checkstyle-report:0.4.0
            variables:
              CHECKSTYLE_RESULT_PATTERN: .*/phpstan_checkstyle.xml
              CHECKSTYLE_REPORT_TITLE: PHPStan Checkstyle report
              CHECKSTYLE_REPORT_ID: phpstan-checkstyle
              REPORT_FAIL_SEVERITY: error
    - step: &phpunit-and-coverage
        name: "PHPUnit: Run Unit and Feature testsuites and coverage"
        script:
          - sed -i 's|<env name="DB_USERNAME" value="root"/>|<env name="DB_USERNAME" value="dbuser"/>|g' phpunit.xml.dist
          - sed -i 's|<env name="DB_PASSWORD" value=""/>|<env name="DB_PASSWORD" value="dbpass"/>|g' phpunit.xml.dist
          - ./vendor/bin/phpunit -c phpunit.xml.dist --coverage-html reports/ --coverage-clover coverage/clover.xml --log-junit test-reports/junit.xml
#          - ./vendor/bin/coverage-check coverage/clover.xml 95
        artifacts:
          - coverage/clover.xml
        services:
          - database
  services:
    database:
      image: mysql:8.0
      variables:
        MYSQL_DATABASE: phpunit
        MYSQL_ROOT_PASSWORD: root
        MYSQL_USER: dbuser
        MYSQL_PASSWORD: dbpass

pipelines:
  pull-requests:
    '{feature/*,bugfix/*,hotfix/*,epic/*,test,acceptance,main}':
      - step: *project-build
      - parallel:
          - step: *codestyle
          - step: *npm-lint
          - step: *static
          - step: *phpunit-and-coverage

  branches:
    accept:
      - step: *project-build
      - parallel:
          - step: *codestyle
          - step: *npm-lint
          - step: *static
          - step: *phpunit-and-coverage
      - step:
          name: Deploy
          deployment: Accept
          artifacts:
            download: false
          script:
            - wget ${INERTIA_DEPLOY_SCRIPT_URL}
            - chmod +x inertia-deploy.sh
            - ./inertia-deploy.sh accept
    test:
      - step: *project-build
      - parallel:
          - step: *codestyle
          - step: *npm-lint
          - step: *static
          - step: *phpunit-and-coverage
      - step:
          name: Deploy
          deployment: Test
          artifacts:
            download: false
          script:
            - wget ${INERTIA_DEPLOY_SCRIPT_URL}
            - chmod +x inertia-deploy.sh
            - ./inertia-deploy.sh test
